#include <iostream>
using namespace std;

//pair with a given difference
int Solution::solve(vector<int> &A, int B) {
   
    sort(A.begin(),A.end());
  
  
    int i=0,j=0;
    while(j<A.size() && i<A.size())
    {
        if( i!=j && (A[j]-A[i])==B )
        return 1;
        
       if(A[j]-A[i]<B)
       {
           j++;
       }
       else {
           i++;
       }
       
    }
    return 0;
}

//3 sum nearest 
int Solution::threeSumClosest(vector<int> &A, int B) {
    int n=A.size();
    long long int ans=0;
    long long int nearness=INT_MAX;
    sort(A.begin(),A.end());
    for(int k=0;k<n;k++)
    {
        int i=k+1;
        int j=n-1;
        while(i<j)
        {
            long long int sum=A[k]+A[i]+A[j];
            
            if(abs(B-sum)<nearness)
            {
                ans=sum;
                nearness=abs(B-sum);
            }
            if(sum>B)
            j--;
            else i++;
        }
    }
    return ans;
    
}

//Counting Triangles
int Solution::nTriang(vector<int> &A) {
    sort(A.begin(),A.end());
    int mod=1e9+7;
    int low=0;
    while(A[low]==0)
    low++;
    long long int ans=0;
    for(int i=A.size()-1;i>=low+2;i--)
    {
        int l=low;
        int h=i-1;
        while(l<h)
        {
            int a=A[l];
            int b=A[h];
            int c=A[i];
            
            if(a+b>c)
            {
                ans+=(h-l);
                h--;
            }
            else {
                l++;
            }
            
        }
    }
    return ans%mod;
}
//Maximum Ones after modification 

int Solution::solve(vector<int> &A, int B)
{
    int i=0,j=0;
    int n=A.size();
    int ans=0;
    while(j<n)
    {
        while(j<n && B>0)
        {
            if(A[j]==0)
            B--;
            
             j++;
             
            ans=max(ans,j-i);
        }
        while(i<=j && B<0)
        {
            if(A[i]==0)
            B++;
            i++;
        }
    }
    return ans;
}

//Maximum number of 1 after chaging B number of zero continuous 
int Solution::solve(vector<int> &A, int B) {
   int i=0,j=0;
    int n=A.size();
    int ans=0;
    while(j<n)
    {
        while(j<n && B>=0)
        {
            if(A[j]==0)
            B--;
            
              j++;
              if(B>=0)
            ans=max(ans,j-i);
           
           // cout<<ans<<endl;
        }
        while(i<=j && B!=0)
        {
            if(A[i]==0)
            B++;
            i++;
        }
    }
    return ans;
}

// subarray with sum B 
int Solution::solve(vector<int> &A, int B)
{
    int sum=0;
    
    int i=0,j=0;
    int n=A.size();
    int ans=0;
    
    while(j<n)
    {
        if(sum+A[j]<B)
        {
            sum+=A[j];
            ans+=(j-i+1);
            j++;
        }
        else {
            sum-=A[i];
            i++;
        }
    }
    
    return ans;
}

//Exact B integers 
int check(vector<int>A,int B)
{
   unordered_map<int,int>mp;
    for(int i=0;i<A.size();i++)
    mp[A[i]]=0;
    int i=0,j=0,dis=0,ans=0;
    
    while(j<A.size())
    {
       if(mp[A[j]]==0)
       dis++;
       mp[A[j]]++;
      
       
          while(dis>B)
          {
              if(mp[A[i]]==1)
              dis--;
              
              mp[A[i]]--;
              i++;
          }
       ans+=j-i;
        j++;
      
    }
    return ans;
}
int Solution::solve(vector<int> &A, int B) {
    return check(A,B)-check(A,B-1);
}

//Maximum continuous 1 
vector<int> Solution::maxone(vector<int> &A, int B) {
   int cx=0;
   int j=0;
   int mx=-1;
   int start=-1;
   int end=-1;
   for(int i=0;i<A.size();i++)
   {
       if(A[i]==0)
       cx++;
       
       if(cx>B)
       {
           while(cx>B)
           {
               if(A[j]==0)
               cx--;
               j++;
           }
       }
      if(mx<(i-j))
      {
          start=j;
          end=i;
          mx=i-j;
      }
   }
   vector<int>ans;
   for(int i=start;i<=end;i++)
   ans.push_back(i);
   
   return ans;
}

//Return the minimum max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])) 
int Solution::minimize(const vector<int> &A, const vector<int> &B, const vector<int> &C) {
int a=A.size(),b=B.size(),c=C.size();
int i=0,j=0,k=0;
int ans=INT_MAX;
while(i<a && j<b && k<c)
{
    ans=min(ans,max(abs(A[i]-B[j]),max(abs(B[j]-C[k]),abs(C[k]-A[i]))));
    
    if(A[i]<=B[j] && A[i]<=C[k])
    i++;
    else if(B[j]<=A[i] && B[j]<=C[k])
    j++;
    else k++;
}
    return ans;
}


//Water 
int Solution::maxArea(vector<int> &A) {
    int i=0,j=A.size()-1;
    int ans=0;
    while(i<j)
    {
        ans=max(ans,min(A[i],A[j])*(j-i));
        if(A[i]>A[j])
        j--;
        else i++;
    }
    return ans;
    
}
//remove duplicate 

int solve(vector<int>v)
{
    
    int x=0;
    int n=v.size();
    
    for(int i=1;i<n;i++)
    {
        if(v[i]!=v[x])
        {
            v[x+1]=v[i];
            x++;
        }
    }
    return x;
}

//sor{t by colour 
void Solution::sortColors(vector<int> &A) {
    int l=0,h=A.size()-1,i=0;
    
    while(i<=h)
    {
        if(A[i]==0)
        {
            swap(A[i],A[l]);
            i++;
            l++;
        }
        else if(A[i]==2)
        {
            swap(A[i],A[h]);
            h--;
        }
        else i++;
    }
} 

int main() {
	// your code goes here
	return 0;
}
