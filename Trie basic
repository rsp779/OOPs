// maximum XOR with elements of array 
class Solution {
public:
    struct trie{
        int value;
        vector<trie*>v;
        trie(){
            for(int i=0;i<2;i++)v.push_back(NULL);
        }
    };
    void insert(int val,trie* head){
        trie* cur=head;
        int cur_val=val;
            for(int i=31;i>=0;i--){
                int bit = (val>>i) & 1;
                vector<trie*>&v=cur->v;
                if(v[bit]==NULL){
                    trie* new_node=new trie();
                    v[bit]=new_node;
                    cur=v[bit];
                }
                else cur=v[bit];
            }
        cur->value=cur_val;
    }
    int xorele(int num,trie* head){
        
        trie* cur=head;
        for(int i=31;i>=0;i--){
            int bit=(num>>i) & 1;
            int sea=(bit==1)?0:1;
            vector<trie*>&v=cur->v;
            if(v[sea]!=NULL){
                cur=v[sea];
            }
            else cur=v[bit];
        }
        return cur->value;
    }
    int findMaximumXOR(vector<int>& nums) {
        trie* head=new trie();
        for(int i=0;i<nums.size();i++){
            insert(nums[i],head);
        }
        int maxans=0;
        for(int i=0;i<nums.size();i++){
            int ans=xorele(nums[i],head);
           // cout<<nums[i]<<" "<<ans<<endl;
            maxans=max(maxans,ans xor nums[i]);
        }
        return maxans;
        
    }
};


#include <bits/stdc++.h>
using namespace std;
struct trie{
    char ch;
    int we;
    vector<trie*>v;
    
    trie(char p)
    {
        ch=p;
        we=0;
        for(int i=0;i<26;i++)
        v.push_back(NULL);
    }
};

trie* root;

void insert(string str)
{
    trie* cur=root;
    
    int index=-1;
    for(int i=0;i<str.length();i++)
    {
        index=str[i]-'a';
        if(cur->v[index]==NULL)
        {
            trie* temp=new trie(str[i]);
            cur->v[index]=temp;
        }
        cur=cur->v[index];
    }
    cur->we+=1;
}
int noofwordending(string str)
{
     trie* cur=root;
    
    for(int i=0;i<str.size();i++)
    {
        int index=str[i]-'a';
        if(cur->v[index]==NULL)
        return 0;
        
        cur=cur->v[index];
    }
    return cur->we;
}
bool search(string str)
{
    trie* cur=root;
    
    for(int i=0;i<str.size();i++)
    {
        int index=str[i]-'a';
        if(cur->v[index]==NULL)
        return false;
        
        cur=cur->v[index];
    }
    if(cur->we>0)
    return true;
    
    return false;
}

void deleteword(string str)
{
    trie* cur=root;
    int index=-1;
    for(int i=0;i<str.size();i++)
    {
        index=str[i]-'a';
        if(cur->v[index]==NULL)
        return;
        
        cur=cur->v[index];
    }
    if(cur->we>0)  // deletes one occurence
    cur->we-=1;
}
//Distinct Substring in string
struct trie{
    char first;
    vector<trie*>v;
    int count;
    bool flag;
    trie(char ch){
        first=ch;
        for(int i=0;i<26;i++)v.push_back(NULL);
        count=0;
        flag=false;
    }
};
void insert(string &word,trie* head,int &ans){
    trie* cur=head;
    for(int i=0;i<word.size();i++){
        int sea=word[i]-'a';
        vector<trie*>&v=cur->v;
        if(v[sea]==NULL){
            trie* new_node=new trie(word[i]);
            v[sea]=new_node;
            cur=v[sea];
        }
        else{
            cur=v[sea];
        }
    }
    if(!(cur->flag))ans+=1;
    cur->flag=true;
}
int countDistinctSubstrings(string &s)
{
    trie* head=new trie('1');
    int ans=0;
    int n=s.size();
    for(int i=0;i<s.size();i++){
       for(int j=1;j<=s.size()-i;j++){
         string str=s.substr(i,j) ;
             insert(str,head,ans);
       }  
    }
    return ans+1;    
}
int main() {
	// your code goes here
     root=new trie('$');
	
 	vector<string> z ={"rana" , "rana" , "pratap"};
 	for(int i=0;i<z.size();i++)
 	insert(z[i]);
	
	cout<<search("suraj")<<endl;
	cout<<noofwordending("rana")<<endl;
	deleteword("rana");  //deletes one occurence of the word
	cout<<noofwordending("rana");
	
	return 0;
}
