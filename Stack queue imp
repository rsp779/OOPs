#include <iostream>
using namespace std;

//Rain water trapped
int rainwatertrapped(vector<int>v)
{
    if(v.size()<3)
    return 0;
    int n=v.size();
    int i=1,j=n-1;
    int lmax=v[0],rmax=v[n-2];
    
    int ans=0;
    while(i<=j)
    {
        if(lmax<=rmax)
        {
            ans+=max(0,lmax-v[i]);
            lmax=max(lmax,v[i]);
            i++;
        }
        else {
            ans+=max(0,rmax-v[j]);
            rmax=max(rmax,v[j]);
            j--;
        }
    }
    return ans;
}
//sliding window maximum
vector<int> swm(vector<int>v,int B)
{
    vector<int>ans;
    int n=v.size();
    deque<int>dq;
    
    for(int i=0;i<n;i++)
    {
        
        
        while(!dq.empty() && v[dq.back()]<v[i])
        dq.pop_back();
        
        dq.push(i);
	
        if(i+1>=B){
        ans.push_back(v[dq.front()]);
	
	if(dq.front==i-B+1)dq.pop_front();
	
	}
    }
    return ans;
}
//first non repeating charecter in stream    ==> second way is to use doubly link list
string FirstNonRepeating(string A){
		    
		    queue<char>q;
		    unordered_map<char,int>mp;
		    string ans="";
		    
		    for(int i=0;i<A.size();i++)
		    {
		        mp[A[i]]++;
			
		        if(mp[A[i]]==1)
		        q.push(A[i]);
		        
		        while(!q.empty() && mp[q.front()]!=1)
		        {
		            q.pop();
		        }
		        if(q.size()==0)
		        ans.push_back('#');
		        else ans.push_back(q.front());
		    }
		    return ans;
		}

//sum of minimum and maximum elements in subarray of size k 
int solve(vector<int>v,int k)
{
    deque<int>mx;
    deque<int>mi;
    int ans=0;
    for(int i=0;i<v.size();i++)
    {
        
        while(!mx.empty && v[mi.back()]>v[i])
        mi.pop_back();
        
        while(!mx.empty() && v[mx.back()]<v[i])
        mx.pop_back();
        
	mi.push_back(i);
	mx.push_back(i);
	
        if(i+1>=k)
        {
            ans+=v[mi.front()]+v[mx.front()];
	    if(mi.front()==i-B+1)mi.pop_front();
	    if(mx.front()==i-B+1)mx.pop_front();
        }
    }
    return ans;
}
//check if all levels are anagram or not in a tree

// ==> use map with level order


//first negative integer in all B size subarray

vector<int> swm(vector<int>v,int B)
{
    vector<int>ans;
    int n=v.size();
    deque<int>dq;
    
    for(int i=0;i<n;i++)
    {
        
        if(v[i]<0)
        dq.push(i);
        
             if(i+1>=B )
          {   
       		 if(dq.size()!=0)      
		 
      		  ans.push_back(v[dq.front()]);
		  
        	else ans.push_back(0);
		
		if(!dq.empty() && dq.front()==i-B+1)dq.pop_front();
         }
    }
    return ans;
}

//0-1 matrix
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n=grid.size();
	    int m=grid[0].size();
	    vector<vector<int>>dir={{1,0},{-1,0},{0,1},{0,-1}};
	     vector<vector<int>>ans(n,vector<int>(m,0));
	    vector<vector<int>>vis(n+1,vector<int>(m+1,0));
	    
	    queue<pair<int,int>>q;
	    for(int i=0;i<grid.size();i++)
	    {
	        for(int j=0;j<grid[i].size();j++)
	        {
	            if(grid[i][j]==1)
	            {
	                vis[i][j]=1;
	                
	                q.push({i,j});
	            }
	            
	        }
	    }
	    
	    while(!q.empty())
	    {
	        pair<int,int> p=q.front();
	        q.pop();
	        int i=p.first;
	        int j=p.second;
	        for(int k=0;k<4;k++)
	        {
	            int x=p.first + dir[k][0];
	            int y=p.second+ dir[k][1];
	            
	            if(x<0 || y<0 || x>=n || y>=m || vis[x][y])
	            continue;
	            
	            ans[x][y]=ans[i][j]+1;
	            vis[x][y]=1;
	            q.push({x,y});
	        }
	    }
	    return ans;
	}
int orangesRotting(vector<vector<int>>& grid) {
        
        queue<pair<int,int>>q;
	int count=0;
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                q.push({i,j});
		else if (grid[i][j]==1) count++;
            }
        }
        vector<vector<int>>v={{1,0},{-1,0},{0,1},{0,-1}};
        
        int steps=0;
        while(!q.empty())
        {
             steps++;
            int x=q.size();
            while(x--)
            {
                pair<int,int>p=q.front();
                q.pop();
                
                for(int k=0;k<4;k++)
                {
                    int x=p.first+v[k][0];
                    int y=p.second+v[k][1];
                    
                    if(x<0 || y<0 || x>=n || y>=m || grid[x][y]==2 || grid[x][y]==0)
                    continue;
                    count--;
                    grid[x][y]=2;
                    q.push({x,y});
                }
            }
            
        }
       if(count==0) return steps-1;
        return -1;
    }
    
    //Circular petrol pump => whether or not it is possible to travel the entire array
    int tour(petrolPump p[],int n)
    {
       int extra=0,start=0,carry=0;
       
       for(int i=0;i<n;i++)
       {
       int cur=p[i].distance - p[i].petrol + carry;
       
       if(cur>0){
       	carry=cur;
       
       }
       else {
       extra+=cur;
       start=i+1;
       carry=0;
       
       }
       if(extra+carry>=0) return start;
       return -1;
       
       }
       
       
       
       
}
//Interleave the queue
queue<int> Interleave(queue<int>q)
{
    if(q.size()%2!=0)
    return q;
    
    int n=q.size()/2;
    stack<int>s;
    
    for(int i=0;i<n;i++){
    	s.push(q.front());
	q.pop();
    }
    
    while(!s.empty()){
    	q.push(s.top());
	s.pop();
    }
    for(int i=0;i<n;i++){
    	q.push(q.front());
	q.pop();
    }
    for(int i=0;i<n;i++){
    	s.push(q.front());
	q.pop();
    
    }
    while(!s.empty()){
    q.push(s.top());
    s.pop();
    q.push(q.front());
    q.pop();
    }
    return q;
}

int main() {
	// your code goes here
	return 0;
}
