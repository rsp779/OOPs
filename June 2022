// Find the largest number whoes subsequence has k digits
#include <bits/stdc++.h>
using namespace std;

int main() {
	int n;
	cin>>n;
	vector<int>arr(n,0);
	for(int i=0;i<n;i++)cin>>arr[i];
	
	
	int find;
	cin>>find;
	
	stack<int>s;
	for(int i=0;i<n;i++){
	    
	    while(!s.empty() && s.top()<arr[i] && (find - s.size()<(n-i)))
	    s.pop();
	    
	    if(s.size()<find)
	    s.push(arr[i]);
	  
	}
	int ans=0;
	stack<int>rev;
	while(!s.empty()){
	    rev.push(s.top());
	    s.pop();
	}
	while(!rev.empty()){
	    ans=(ans*10)+rev.top();
	    rev.pop();
	}
	cout<<ans<<endl;
	
}

#Stock Span 

for(int i=0;i<n;i++){
  int cur=1;
  while(!s.empty() &&  v[i-current]<v[i]){
  cur+=v[i-current];
  }
 ans[i]=current;
}


//Your task is to rearrange  the array elements alternatively i.e first element should be max value, 
second should be min value, third should be second max, fourth should be second min and so on.

void rearrange(long long *arr, int n) 
 { 
    int max_idx = n - 1, min_idx = 0;

    int max_elem = arr[n - 1] + 1;

    
    for (int i = 0; i < n; i++) {
       
        if (i % 2 == 0) {
            arr[i] += (arr[max_idx] % max_elem) * max_elem;
            max_idx--;
        }

        else {
            arr[i] += (arr[min_idx] % max_elem) * max_elem;
            min_idx++;
        }
    }

    // array elements back to it's original form
    for (int i = 0; i < n; i++)
        arr[i] = arr[i] / max_elem;
    	 
  }




