#include <iostream>
using namespace std;

// We are given a Binary Tree and a number k. We want to find the sum of all nodes whose kth parent is even.
=> store the path and then find the node v.size()-(k-2) index node and check whether it is even or odd 
//recover a binary tree --> two nodes swap in bst

//Maximum average of subtree values in a given Binary Tree

vector<int> postorder(TreeNode* root,double &max_ans){

if(root==NULL)return {0,0};

vector<int>lef=postorder(root->left,max_ans);
vector<int>rig=postorder(root->right,max_ans);

double cur_sum=root->val+lef[0]+rig[0];
double number_of_node=1+lef[1]+rig[1];
double cur_average=(cur_sum*1.0)/number_of_node;

max_ans=max(max_ans,cur_average);
return {cur_sum,number_of_node};

}

//print path between 2 nodes of a tree

//=> find and lca and then find the path 
// merge both the paths and also take care of the test case that lca doesn't appear twice 


// Convert binary tree into dll

void inorder(Dll* root,Dll* &head,Dll* &tail,Dll* &prev){

	if(root==NULL)return ;
	inorder(root->left,head,tail,prev);
	
	if(tail==NULL)
	tail=root;
	
	head=root;
	
	if(prev!=NULL)
	{
		prev->right=root;
		root->left=prev;
	
	}
	prev=root;
	inorder(root->right,head,tail,prev);

}

void leftpart(TreeNode* node){
	if(node==NULL)return;
	
	if(node->left){
	ans.push_back(root->val);
	leftpart(node->left);
	}
	
	else if(root->right){
		ans.push_back(root->val);
		leftpart(root->right);
	}
}
void rightpart(TreeNode* node){
	if(node==NULL)return ;
	
	if(root->right){
	rightpart(root->right);
	ans.push_back(root->val);
		
	}
	else if(root->left){
		
		rightpart(root->left);
		ans.push_back(root->val);
	}
}
void leafnode(TreeNode* root){
	if(!root)return ;
	ans.push_back(root->val);
	leafnode(root->left);
	leafnode(root->right);
	rightpart(root->right); // to get printed in bottom up manner we did recursion first and then pushed
	
}
void boundaryelements(TreeNode* root){
vector<int>ans;
ans.push_back(root->val);
leftpart(root->left);
leafnode(root->left);
leafnode(root->right);
r


}
// Boundary Traversal of tree

//1 .  1 2 3 4 8 6 7 5 9      1. // 1 2 3 4 6 5 7 8 9  // 1 2 3 4 5 6 7 8 9


void recover(TreeNode* root,TreeNode* &f,TreeNode* &s,TreeNode* &t,TreeNode* &prev)
{
    if(root==NULL)
    return ;
    recover(root->left,f,s,t,prev);
    
    if(prev!=NULL && prev->val>root->val)
    {
            if(!f)
            {
                f=root;
                s=prev;
            }
            else {
                f=root;
            }
    }
    prev=root;
    recover(root->right,f,s,t,prev);
}

//2 sum BST --> two nodes whose sum is target

bool ispos(TreeNode* root)
{
    stack<TreeNode*>s1;
    stack<TreeNode*>s2;
    
    TreeNode* cur=root;
    
    while(root)
    {
        s1.push(root);
        root=root->left;
    }
    while(cur)
    {
        s2.push(cur);
        cur=cur->right;
    }
    while(!s1.empty() && !s2.empty())
    {
        if(s1.top()==s2.top())
        break;
        
        TreeNode* root=s1.top();
        TreeNode* cur=s2.top();
        
        if(root->val+cur->val==target)
        return true;
        else if (root->val+cur->val>target){
            
            s2.pop();
            cur=cur->left;
            while(cur)
            {
                 s2.push(cur);
            cur=cur->right;
            }
        }
        else {
            s1.pop();
            root=root->right;
              while(root)
          {
              s1.push(root);
             root=root->left;
             }
        }
    }
    return false;
}

//Binary tree from post order
int search(vector<int>&in,int i,int j,int ele)
{
    for(int k=i;k<=j;k++)
    if(in[k]==ele)
    return k;
    
    return -1;
}
TreeNode* posttoTree(vector<int>&post,vector<int>&in,int low,int high,int &last)
{
    if(i>=j)
    return NULL;
    
    
    int mid=search(in,low,high,post[last--]);   // int mid =mp[post[last--]]; => O(n*n) => O(n)
    
    TreeNode* root=new TreeNode(in[index]);
    
    root->right=posttoTree(post,in,mid+1,high,last);
    root->left=posttoTree(post,in,low,mid-1,last);
    
    return root;
}

//Least Common Ancestor


TreeNode* LCA(TreeNode* root,TreeNode* ans ,TreeNode* A,TreeNode* B)
{
    if(root==NULL)
    return root;
    
    TreeNode* lef=LCA(root->left,ans,A,B);
    TreeNode* rig=LCA(root->right,ans,A,B);
    
  if(root->val==A && root->val==B)ans=root;    1. If both the value are equal
  if((lef!=NULL || rig!=NULL) && (root->val==B || root->val==C)) ans=root;
  if(lef !=NULL && rig!=NULL) ans=root;
  if(root->val==B || root->val==C) return root;
  
  return lef?lef:rig;
}

// flatten a tree to link list 

TreeNode* flattentree(TreeNode* root)
{
    if(root==NULL)
    return NULL;
    
    TreeNode* lef=flattentree(root->left);
    
    TreeNode* temp=root->right;
    
    root-right=root->left;
    
    root->left=NULL;
    
    TreeNode* cur=root;
    while(cur->right)
    {
        cur=cur->right;
    }
    cur->right=temp;
   
    TreeNode* rig=flattentree(root->right);
    
    return root;
}

// Maximum sum path   //VIP

int maxsumpath(TreeNode *A, int &ans)
{
    if(root==NULL)
    return 0;
    
    int lef=maxsumpath(A->left,ans);
    int rig=maxsumpath(A->right,ans);
    
    int x=A->val+lef+rig;    // node is in middle of the path
    x=max(x,A->val);         // node is starting of the path
    x=max(x,A->val+max(lef,rig)); // node is end of the path
    
    ans=max(ans,x);
    
    return max(A->val,max(lef,rig)+A->val);
}

//Diamter of a tree


int dia(TreeNode* A,int &ans)
{
    if(root==NULL)
    return 0;
    
    int lef=dia(A->left,ans);
    int rig=dia(A->rig,ans);
    
    int x=1+lef+rig;
    
    ans=max(ans,x);
    
    return 1+max(lef,rig);
}

//Burn a tree => time taken to reach the farthest node from the given node 

void populateparent(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&mp,TreeNode* &node,int B){
    
    if(root==NULL)return ;
    if(root->val==B){
        node=root;
    }
    if(root->left){
        mp[root->left]=root;
        populateparent(root->left,mp,node,B);
    }
    if(root->right){
        mp[root->right]=root;
        populateparent(root->right,mp,node,B);
    }
} 
int Solution::solve(TreeNode* A, int B) {
    unordered_map<TreeNode*,TreeNode*>mp;
    TreeNode* node=NULL;
    populateparent(A,mp,node,B);
    queue<TreeNode*>q;
    if(node==NULL)return 0;
    q.push(node);
    int timer=-1;
   
    unordered_map<TreeNode*,int>vis;
    
    while(!q.empty()){
        int n=q.size();
        // cout<<timer<<" "<<q.size()<<endl;
        timer++;
       
        for(int i=0;i<n;i++){
            TreeNode* cur=q.front();
            q.pop();
            if(vis.find(cur)!=vis.end() && mp.find(cur->right)==mp.end())continue;
            vis[cur]=1;
            if(cur->left && vis.find(cur->left)==vis.end()){
                q.push(cur->left);
            }
            if(cur->right && vis.find(cur->right)==vis.end()){
                q.push(cur->right);
            }
            if(mp.find(cur)!=mp.end() && vis.find(mp[cur])==vis.end()) {
               // cout<<mp[cur]->val<<" "<<timer<<" "<<i<<endl;
                q.push(mp[cur]);
            }
        }
    }
    return timer;
}


//serialize deserialize Tree

 string serialize(TreeNode* root) {
        string s="";
        if(root==NULL)return s;
        
        queue<TreeNode*>q;
        q.push(root);
        s.append(to_string(root->val));
        s.append(",");
        while(!q.empty()){
            int n=  q.size();
            for(int i=0;i<n;i++){
                TreeNode* curNode=q.front();
                q.pop();
                if(curNode->left)
                {
                    q.push(curNode->left);
                    s.append(to_string(curNode->left->val));
                }
                else s.append("#");
                s.append(",");
                if(curNode->right){
                    q.push(curNode->right);
                    s.append(to_string(curNode->right->val));
                }
                else s.append("#");
                s.append(",");
            }
        }
        cout<<s;
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
         if(data.size() == 0) return NULL; 
        stringstream s(data);
        string str; 
        getline(s, str, ',');
        TreeNode *root = new TreeNode(stoi(str));
        queue<TreeNode*> q; 
        q.push(root); 
        while(!q.empty()) {
            
            TreeNode *node = q.front(); 
            q.pop(); 
            
            getline(s, str, ',');
            if(str == "#") {
                node->left = NULL; 
            }
            else {
                TreeNode* leftNode = new TreeNode(stoi(str)); 
                node->left = leftNode; 
                q.push(leftNode); 
            }
            
            getline(s, str, ',');
            if(str == "#") {
                node->right = NULL; 
            }
            else {
                TreeNode* rightNode = new TreeNode(stoi(str)); 
                node->right = rightNode;
                q.push(rightNode); 
            }
        }
        return root;
 }

// Maximum Sum BST in BT

vector<int> solve(TreeNode* root,int &ans){
        if(root==NULL) return {0,INT_MIN,INT_MAX};
        
        vector<int> ls = solve (root->left,ans);
        vector<int> rs = solve (root->right,ans);
        
        if(root->left==NULL && root->right==NULL){
            ans=max(ans,root->val);
            return {root->val,root->val,root->val};
        }
        else if (root->left == NULL){
            if(root->val<rs[2]){
                ans=max(ans,root->val+rs[0]);
                return {root->val+rs[0],rs[1],root->val};
            }
        }
        else if (root->right == NULL){
            
            if(root->val > ls[1]){
                ans=max(ans,root->val+ls[0]);
                return {root->val+ls[0],root->val,ls[2]};
            }
        }
        else {
            if( root->val > ls[1] && root->val< rs[2]){
            
                ans=max(ans,root->val+ls[0]+rs[0]);
                return {root->val+ls[0]+rs[0],rs[1],ls[2]};
            }
        }
        return {-1,INT_MAX,INT_MIN};
   }



//Same tree structure

int main() {
	// your code goes here
	return 0;
}
