#include <bits/stdc++.h>
using namespace std;

//submatrix max sum size of B

int solve(vector<vector<int>>v<int B)
{
    int n=v.size();
    int m=v[0].size();
    
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            dp[i][j]=v[i-1][j-1]+dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1];
        }
    }
    
    int ans=INT_MIN;
    
    for(int i=B;i<=n;i++)
    {
        for(int j=B;j<=m;j++)
        {
            ans=max(ans,dp[i][j]-dp[i-B][j]-dp[i][j-B]+dp[i-B][j-B]);
        }
    }
}

//find the first missing positive integer 
int solve(vector<int>v)
{
    int n=v.size();
    
    for(int i=0;i<n;i++)
    {
        if(A[i]>0 && A[i]<n)
        {
            int pos=A[i]-1;
            
            if(A[i]!A[pos])
            {
                swap(A[i],A[pos]);
                i--;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        if(A[i]!=(i+1))
        return i+1;
    }
    return n+1;
}

//Set Matrix Zero 
void Solution::setZeroes(vector<vector<int> > &A) {
    int n=A.size();
    int m=A[0].size();
    
    bool row=false;
    bool col=false;
    
    for(int i=0;i<n;i++)
    {
        if(A[i][0]==0)
        row=true;
    }
    
    for(int j=0;j<m;j++)
    {
        if(A[0][j]==0)
        col=true;
    }
    
    for(int i=1;i<n;i++)
    {
        for(int j=1;j<m;j++)
        {
            if(A[i][j]==0)
            {
                A[0][j]=0;
                A[i][0]=0;
            }
        }
    }
    
    for(int i=1;i<n;i++)
    {
        for(int j=1;j<m;j++)
        {
            if(A[i][j]==1 && (A[i][0]==0 || A[0][j]==0))
            A[i][j]=0;
        }
    }
    if(row)
    {
        for(int i=0;i<n;i++)
        A[i][0]=0;
    }
    if(col)
    {
        for(int j=0;j<m;j++)
        A[0][j]=0;
    }
}


//Given an array A of integers, find the maximum of j - i subjected to the constraint of A[i] <= A[j].
int Solution::maximumGap(const vector<int> &A) {

    int n=A.size();
    vector<int>rig(n,0);

    rig[n-1]=A[n-1];

    for(int i=n-2;i>=0;i--)
    rig[i]=max(rig[i+1],A[i]);

    int i=0,j=0;
    int ans=0;
    while(i<n && j<n)
    {
       if(rig[j]>=A[i])
       {
       ans=max(ans,j-i);
       j++;
       }
       else i++;
    }
    return ans;
}

//Hotel Bookings Possible 
bool Solution::hotel(vector<int> &arrive, vector<int> &depart, int K) {
        sort(arrive.begin(),arrive.end());
        sort(depart.begin(),depart.end());
        
        int i=0,j=0;
        int n=arrive.size();
        int maxroomreq=0;
        while(i<n)
        {
            if(arrive[i]<depart[j])
            {
                i++;
                maxroomreq=max(maxroomreq,i-j);
            }
            else j++;
        }
       
        if(maxroomreq>K)
        return false;
        
        return true;
}

//Find Permutation 
vector<int> Solution::findPerm(const string A, int B) {
    
    int n=A.size();
    vector<int>ans(n+1,0);
    int j=B;
    int i=1;
    
    int k=0;
    
    while(k<n)
    {
        if(A[k]=='D')
        ans[k]=j--;
        else ans[k]=i++;
        
        k++;
    }
    ans[k]=i;
    return ans;
}

//largest number possible 
static bool sortbysec(string a,string b)
{
    string c=a;
    string d=b;
    string e=a;
    string f=b;
    string st1=c+d;
    string st2=d+c;
    
    //cout<<st2<<" "<<st1<<endl;
    if(st2.compare(st1)>0)
    return false;
    
    return true;
}
string Solution::largestNumber(const vector<int> &A) {
    
    vector<string>s;
    int n=A.size();
    for(int i=0;i<n;i++)
    s.push_back(to_string(A[i]));
    string ans="";
   sort(s.begin(),s.end(),sortbysec);
   for(int i=0;i<n;i++)
  ans=ans.append(s[i]);
  
  int x=ans.length();
  int i=0;
  while(ans[i]=='0' && (i<x-1))
  {
      i++;
  }
   ans=ans.substr(i,x-i);
   return ans;
    
    
}

//rotate Matrix 
void Solution::rotate(vector<vector<int> > &A) {
    int n=A.size()-1;
    int x=0,y=n;
    int temp=0;
    while(temp<y)
    {
        for(int j=x;j<y;j++)
        {
            int temp=A[x][j];
            A[x][j]=A[n-j][x];
            A[n-j][x]=A[n-x][n-j];
            A[n-x][n-j]=A[j][n-x];
            A[j][n-x]=temp;
        }
        x++;
        temp++;
        y--;
    }
}
//Next permutation 
vector<int> Solution::nextPermutation(vector<int> &A) {
    
    int index=-1;
    int n=A.size();
    if(n==1)
    return A;
    for(int i=n-1;i>0;i--)
    {
        if(A[i]>A[i-1])
        {
            index=i-1;
            break;
        }
    }
    if(index==-1)
    {
    sort(A.begin(),A.end());
    return A;
    }
    int sec=-1;
    int mi=INT_MAX;
    for(int i=index+1;i<n;i++)
    {
        if(A[i]>A[index]  && mi>A[i] )
        {
            sec=i;
            mi=A[i];
        }
    }
    swap(A[sec],A[index]);
  
    reverse(A.begin()+index+1,A.end());
    return A;
}
#include <iostream>
using namespace std;

//triplet with sum in the given range 2 and 3

int Solution::solve(vector<string> &A) {
    
    int n=A.size();
    double a=stod(A[0]);
    double b=stod(A[1]);
    
    for(int i=2;i<n;i++)
    {
        double c=stod(A[i]);
        
        double sum=a+b+c;
        if(sum>1 && sum<2)
        return 1;
        
        if(sum>2)
        {
           if(a>=c && a>=b)
           {
               a=c;
           }
           else if(b>=c && b>=a)
           {
               b=c;
           }
           
        }
        else {
           if(a<=c && a<=b)
           a=c;
           else if(b<=c && b<=a)
           b=c;
           
        }
    }
    return 0;
}

// A element is special if removal of that element make the array balanced.

//Array will be balanced if sum of even index element equal to sum of odd index element.

int Solution::solve(vector<int> &A) {
   
    int odd=0,even=0;
    for(int i=0;i<A.size();i++)
    {
        if(i%2==0)
        even+=A[i];
        else odd+=A[i];
    }
    int count=0;
    
    for(int i=0;i<A.size();i++)
    {
        if(i%2==0)
        even-=A[i];
        else odd-=A[i];
        
        if(even==odd)
        count++;
        
        if(i%2==0)
        odd+=A[i];
        else even+=A[i];
    }
    return count;
}

//Given an unsorted array, find the maximum difference between the 
//successive elements in its sorted form.

int Solution::maximumGap(const vector<int> &A) {
    int n=A.size();
    if(n<2)
    return 0;
    int xmin=1e9,xmax=-1;
    for(int i=0;i<n;i++)
    {
        xmin=min(xmin,A[i]);
        xmax=max(xmax,A[i]);
    }
    int delta= ceil(double(xmax-xmin)/double(n-1));
    vector<int>bmin(n-1,INT_MAX);
    vector<int>bmax(n-1,INT_MIN);
    if(delta==0)
    return 0;
    for(int i=0;i<n;i++)
    {
        if(A[i]==xmax || A[i]==xmin)
        continue;
        int x=(A[i]-xmin)/delta;
        bmin[x]=min(bmin[x],A[i]);
        bmax[x]=max(bmax[x],A[i]);
    }
    int prev=xmin;
    int ans=0;
    for(int i=0;i<n-1;i++)
    {
        if(bmin[i]==INT_MAX)
        continue;
        
            ans=max(ans,bmin[i]-prev);
            prev=bmax[i];
    }
    ans=max(ans,xmax-prev);
    
    return ans;
}

//find out integer which occur more than n/3 times
int Solution::repeatedNumber(const vector<int> &A) {
    
    int a1=-1,a2=-1,c1=0,c2=0;
    int n=A.size();
    for(int i=0;i<n;i++)
    {
        if(A[i]==a1)
        {
            c1++;
        }
        else if(A[i]==a2)
        {
            c2++;
        }
        else if(c1==0)
        {
            c1++;
            a1=A[i];
        }
        else if(c2==0)
        {
            c2++;
            a2=A[i];
        }
        else {
            c1--;
            c2--;
        }
    }
    
    c1=0,c2=0;
    
    for(int i=0;i<n;i++)
    {
        if(A[i]==a1)c1++;
        if(A[i]==a2)c2++;
    }
    if(c1>n/3)return a1;
    if(c2>n/3)return a2;
    
    return -1;
}
//Each integer appears exactly once except A which appears twice and B which is missing.

vector<int> Solution::repeatedNumber(const vector<int> &A) {
    
    int x=0,y=0;
    int n =A.size();
    for(int i=0;i<A.size();i++)
    {
        x=x^A[i];
    }
    for(int i=1;i<=A.size();i++)
    x=x^i;
    int p=x;
    int last=-1;
   for(int i=0;i<32;i++)
   {
       if(p%2!=0)
       {
           last=i+1;
           break;
       }
       p=p/2;
   }
    
    int z=0;
    for(int i=0;i<n;i++)
    {
        if(A[i]&last)
        z=z^A[i];
        
        if((i+1)&last)
        z=z^(i+1);
    }
    
    vector<int>ans;
    ans.push_back(z);
    ans.push_back(x^z);
    return ans;
}






