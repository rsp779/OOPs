#include <iostream>
using namespace std;
//seiveoferosthenes
vector<bool> seiveoferosthenes(int A)
{
    vector<bool>prime(A+1,true);
    
    int n=sqrt(A);
    
    for(int i=2;i<=n;i++)
    {
        for(int j=2;j*i<=A;j++)
        {
            prime[i*j]=false;
        }
    }
    return prime;
}

//sum of pairwise Hamming distance 

int solve(vector<int>v)
{
    int val=1;
    int ans=0;
    for(int i=1;i<=32;i++)
    {
        int count=0;
        for(int j=0;j<v.size();j++)  //one time one bit 
        {
            if(val & v[j])
            count++;
        }
        
        ans+=(v.size()-count)*count;
        val=val*2;
    }
    return ans;
}

//step by step ith step forward and backward 
int Solution::solve(int A) {
   if(A==0)
   return 0;
   long long x=0;
   int steps=0;
   
   A=abs(A);
   
   for(int i=1;i<1e9;i++)
   {
       x+=i;
       steps++;
       
       if(x==A)
       return steps;
       
       if(x>A)
       {
           if((x-A)%2==0)
           return steps;
       }
   }
   return -1;
}

//pow of two integers 
int Solution::isPower(int A) {
    
    if(A==1)
    return 1;
    
    int x=sqrt(A);
    
    for(int i=2;i<=x;i++)
    {
        int p=log(A)/log(i);
        
        if(pow(i,p)==A)
        return 1;
    }
    return 0;
}

// AZ ==> 52  AA ==> 27
int Solution::titleToNumber(string A) {
   int ans=0;
   for(int i=0;i<A.size();i++)
   {
       ans=(ans*26) + (A[i]-'A'+1);
   }
    return ans;
}
// 27 ==> AA 
string Solution::convertToTitle(int A) {
    string str="";
    int x=A;
    while(x>0)
    {
       
            str.push_back(char('A'+((x-1)%26)));
            x=(x-1)/26;
        
    }
    reverse(str.begin(),str.end());
    return str;
}
//GCD 
int ans(int a,int b)
{
    if(a==0)
    return b;
    
    return ans(b%a,a);
}
int Solution::gcd(int A, int B) {
    return ans(A,B);
}


//Nth fibonacci 
#define mod 1000000007
 
void multiply(vector<long> &a, vector<long> &b)
{
    long x = (a[0]*b[0]+a[1]*b[2])%mod;
    long y = (a[0]*b[1]+a[1]*b[3])%mod;
    long z = (a[2]*b[0]+a[3]*b[2])%mod;
    long w = (a[2]*b[1]+a[3]*b[3])%mod;
    a = {x,y,z,w};
}
 
void fib(vector<long> &temp, vector<long> &arr, int n)
{
    if(n==1) return;
    if(n%2==0)
    {
        fib(temp,arr,n/2);
        multiply(temp, temp);
    }
    else
    {
        fib(temp, arr, n-1);
        multiply(temp,arr);
    }
}
 
int Solution::solve(int A) {
    if(A<=2) return 1;
    vector<long> arr = {1,1,1,0};
    vector<long> temp = arr;
    fib(temp,arr,A-1);
    return temp[0];
}
 
// Sorted permutation Rank 
int Solution::findRank(string A) {
    int mod=1000003;
    int n=A.size();
    vector<long long int>fac(n+2,1);
    
    for(int i=2;i<n+2;i++)
    fac[i]=(fac[i-1]*i)%mod;
    
    long long int ans=0;
    
    for(int i=0;i<n;i++)
    {
        long long int c=0;
        for(int j=i;j<n;j++)
        {
            if(A[i]>A[j])
            c++;
        }
    
        ans+=c*fac[A.length()-i-1];
      //  cout<<c<<" "<<ans<<endl;    
        
    }
    return ((ans+1)%mod);
}

//largest coprime divisor 
int gcd(int a,int b)
{
    if(b==0)
    return a;
    
    return gcd(b,a%b);
}
int Solution::cpFact(int A, int B) {
   
    while(gcd(A,B)!=1)
    {
       A/=gcd(A,B);  //remove the corresponding factor to reduce A to X
    }
    return (A);
}

//Rearrange a given array 
//so that Arr[i] becomes Arr[Arr[i]] with O(1) extra space.

void Solution::arrange(vector<int> &A) {
    int n=A.size();
    for(int i=0;i<A.size();i++)
    {
      A[i]+=(A[A[i]]%n)*n;
    }
    for(int i=0;i<n;i++)
    A[i]=A[i]/n;
}

//Next Smaller element // 10^(10^5) elements 
string Solution::solve(string A) {
    string str=A;
   // sort(str.begin(),str.end());
    string x=str;
    long long int index=-1;
    
    for(long long  i=A.length()-1;i>0;i--)
    {
    // cout<<x[i]<<" "<<x[i-1]<<endl;   
        if(((int)x[i]) - ((int)x[i-1])>0)
        {
            index=i-1;
            break;
        }
    }
    if(index==-1)
    return "-1";
    
    long long int maxv=INT_MAX;
    long long int indi=-1;
    for(long long int i=index+1;i<str.length();i++)
    {
        if(str[index]<str[i])
        {
            if(str[i]<maxv)
            {
                maxv=str[i];
                indi=i;
            }
        }
    }
     swap(str[index],str[indi]);
    sort(str.begin()+index+1,str.end());
   
    return str;
}
int main() {
	// your code goes here
	return 0;
}
