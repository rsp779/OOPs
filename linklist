#include <bits/stdc++.h>
using namespace std;


// K reverse link list 

ListNode* Solution::reverseList(ListNode* A, int B) {
    
    if(B==1)
    return A;
    
    ListNode* dummy=new ListNode(-1);
    dummy->next=A;
    
    ListNode* cur=dummy,*nex=dummy,*pre=dummy;
    
    
    while(pre->next!=NULL)
    {
        cur=pre->next;
        nex=cur->next;
        for(int i=1;i<B;i++)
        {
            cur->next=nex->next;
            nex->next=pre->next;
            pre->next=nex;
            nex=cur->next;
        }
        pre=cur;
    }
    return dummy->next;
}

struct ListNode{
    
    int val;
    ListNode* next;
    
}

ListNode* reverse(ListNode* head)
{
    if(!head || !head->next)
    return head;
    
    ListNode* reversehead=NULL,cur=head;
    
    while(cur)
    {
       ListNode* nex=cur->next;
       cur->next=reversehead;
       reversehead=cur;
       cur=nex;
    }
    return reversehead;
}

ListNode* reverse(ListNode* &head,ListNode* cur)
{
  if(cur->next==NULL)
  {
     head=cur;    //send by reference
     return NULL;
  }
  
  ListNode* temp=cur->next;
  cur->next=reverse(head,temp);
  
  temp->next=cur;
  return NULL;
}
  
 //detect a cycle
 ListNode* cycle(ListNode* head)
 {
 if(head==NULL|| head->next==NULL)return NULL;
     ListNode* slow=head,fast=head;
     
     do{
         slow=slow->next;
         fast=fast->next->next;
	 
	 if(fast==slow)
	 break;
	 
     }while(fast && fast->next );
     
     if(slow==fast)
     {
         fast=head;
         while(fast!=slow)
         {
             fast=fast->next;
             slow=slow->next;
         }
         return slow;
     }
     return NULL;
}

// Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

ListNode* Solution::deleteDuplicates(ListNode* A) {
    if(A==NULL|| A->next==NULL)return A;
    ListNode* dummy=new ListNode(-1);
    ListNode* temp=dummy;
    ListNode* cur=A;
    int sum=0;
    bool flag=true;
    while(cur){
        
         int count=1;
         while(cur && cur->next && cur->val==cur->next->val){
             count++;
             cur=cur->next;
         } 
         if(count==1){
             temp->next=cur;
             temp=cur;
         }
         cur=cur->next;   
    }
    
    temp->next=NULL;
    return dummy->next;
}


//remove duplicates unsorted link List 

ListNode* removeduplicates(ListNode* head)
{
    unordered_map<int,int>mp;
    ListNode* href=head;
    mp[head->val]++;
    while(head && head->next)
    {
        if(mp.find(head->next->val)!=mp.end())
        {
            head->next=head->next->next;
        }
        else {
            mp[head->next->val]++;
            head=head->next;
        }
    }
    return href;
}

// Addone to the last node of the linklist


ListNode* addone(ListNode* head)
{
    ListNode* cur=head;
    ListNode* last=NULL;
    
    while(cur->next!=NULL)
    {
        if(cur->val!=9)
        {
            last=cur;
        }
        cur=cur->next;
    }
    
    if(cur->val!=9)      // 756
    {
        cur->val+=1;
        return head;
    }
   if(last!=NULL){
   	last->val+=1;     // 789 
	last=last->next;
	
	while(last){
	last->val=0;
	last=last->next;
	}
   	return head;
   }
   else {
   	ListNode* new_head=new ListNode(1);   //999
	new_node->next=head;
	last=head;
	
	while(last){
	last->val=0;
	last=last->next;
	}
   	return new_head;
   }
}

//Add two numbers represented by link ListNode

ListNode* Solution::addTwoNumbers(ListNode* A, ListNode* B) {
   int carry=0;
   ListNode* dummy=new ListNode(-1);
   ListNode* temp=dummy;
   
   while(A||B||carry){
       int sum=carry;
       if(A){
           sum+=A->val;
           A=A->next;
       }
        if (B){
           sum+=B->val;
           B=B->next;
       }
       ListNode* cur=new ListNode(sum%10);
       carry=sum/10;
       temp->next=cur;
       temp=temp->next;
   }
  
   return dummy->next;
}

//Merge Sort of two link List

void Merge(ListNode* A,ListNode* B)
{
  
 
  ListNode* cur=new ListNode(-1);
  ListNode* dummy=cur;
  while(A!=NULL || B!=NULL)
  {
      if(A&&B)
      {
          if(A->val>B->val)
          {
              cur->next=B;
              cur=B;
              B=B->next;
          }
          else {
              cur->next=A;
              cur=A;
              A=A->next;
          }
      }
      else if (A && !B)
      {
          cur-next=A;
          break;
      }
      else {
          cur->next=B;
          break;
      }
  }
  return dummy->next;
    
}

ListNode* mergesort(ListNode* head)
{
    if(head==NULL && head->next==NULL)
    return head;
    
    ListNode* slow=head,*fast=head->next;
    
    while(fast && fast->next)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    fast=slow->next;
    slow->next=NULL;
    
    return merge(mergesort(A),mergesort(fast));
}

//ListNode Split Circular
void split (ListNode* A,ListNode* &h1,ListNode* &h2)
{
    h1=A;
    ListNode* x=A,*y=A,*z=A->next,temp=A;
    while(z->next!=x && z!=temp)
    {
        z=z->next->next;
        y=y->next->next;
        x=x->next->next;
    }
    h2=x->next;
    x->next=NULL;
    if(z==temp)
    {
        y->next=NULL;
    }
    else z->next=NULL;
}

//palindome
=>> reverse the linklist from middle and then compare t
bool palindome(ListNode* A)
{
	if(A==NULL || A->next==NULL)return true;
	
    ListNode* mid=A,*end=A->next;
    
    while(end && end->next)
   {
   	mid=mid->next;
	end=end->next->next;
   }
   ListNode* head_second_part=mid->next;
   mid->next=NULL;
   ListNode* reversehead=reverse(head_second_part);
   
   while(A && reversehead){
   	if(A->val!=reversehead->val)return false;
	A=A->next;
	reversehead=reversehead->next;
   
   }
   return true;
}

//reverse a doubly link List
struct dll{
    int val;
    dll* next;
    dll* back;
}
dll* reverse(dll* head)
{
    dll *finalhead=NULL,*cur=head;
   
    while(cur)
    {
        dll* next_node=cur->next;
        
       cur->next=finalhead;
       if(finalhead)
       finalhead->next=NULL;
       
       finalhead=cur;
       cur=next_node;
    }
    return finalhead;
}
//flatten a link List 
struct pair_data{
	int value;
	Node* node;

}
Node *flatten(Node *root)
{
   Node *head=root;
  
   priority_queue< pair<int,Node*>,vector< pair<int,Node*>>,
   greater< pair<int,Node*>>>pq;
   
  
   while(head)
   {
       pq.push({head->data,head});
       head=head->next;
   }
  Node *fhead=new Node(-1);
  head=fhead;
   while(!pq.empty())
   {
       pair<int,Node*>p=pq.top();
       pq.pop();
     //  cout<<p.first<<" "<<endl;
       fhead->bottom=p.second;
       fhead=p.second;
       if(fhead->bottom)
       pq.push({fhead->bottom->data,fhead->bottom});
   }
  
   return head->bottom;
}


int main() {
	// your code goes here
	return 0;
}
