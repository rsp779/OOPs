//Surrounded region => water flows from all sides so we have to find where the water can be stored(similar)

class Solution {
public:
    bool not_possible(int row,int col,int rowsize,int colsize,vector<vector<char>>&board)
    {
        if(row<0 || col<0 || row>=rowsize || col>=colsize || board[row][col]!='O' )
            return true;
        
         return false;
    }
    void markup(int row,int col,int rowsize,int colsize,vector<vector<char>>&board,vector<int>&dir)
    {
        if(not_possible(row,col,rowsize,colsize,board))return;
        
        board[row][col]='Y';
        
        for(int i=0;i<4;i++){
            int next_x=row+dir[i];
            int next_y=col+dir[i+1];
            
            markup(next_x,next_y,rowsize,colsize,board,dir);
        }
    }
    void solve(vector<vector<char>>& board) {
        int rowsize=board.size(),colsize=board[0].size();
        
        vector<int>dir={1,0,-1,0,1};
        
        for(int row=0;row<rowsize;row++){
           
            if(board[row][0]=='O')
            markup(row,0,rowsize,colsize,board,dir);
            
            if(board[row][colsize-1]=='O')
            markup(row,colsize-1,rowsize,colsize,board,dir);
            
        }
        
        for(int col=0;col<colsize;col++){
            
            if(board[0][col]=='O')
                markup(0,col,rowsize,colsize,board,dir);
            
            if(board[rowsize-1][col]=='O')
                markup(rowsize-1,col,rowsize,colsize,board,dir);
            
        }
        
        for(int row=0;row<rowsize;row++){
            for(int col=0;col<colsize;col++){
               
                if(board[row][col]=='O')
                    board[row][col]='X';
                
                if(board[row][col]=='Y')
                    board[row][col]='O';
            }
        }
    }
};


//Word Break 2 . Given a string s and a dictionary of strings wordDict, 
add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

class Solution {
public:
    void solve(string &s,string &str,vector<string>&ans,int index,
               unordered_map<string,int>&mp){
        
        if(index==s.size()){
            str.pop_back();   //this about the last space
            ans.push_back(str);
            str.push_back(' ');
            return ;
        }
        
        for(int i=index;i<s.size();i++){
            
            string cur=s.substr(index,i-index+1);
            if(mp.find(cur)!=mp.end()){
                str.append(cur);
                str.push_back(' ');
                solve(s,str,ans,i+1,mp);
                str.pop_back();
               
               str=str.substr(0,str.size()-(i-index+1)); // most important line for this question
               
            }
        }
    }
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string>ans;
        string str="";
        unordered_map<string,int>mp;
        
        for(int i=0;i<wordDict.size();i++)
            mp[wordDict[i]]++;
        
        solve(s,str,ans,0,mp);
        
        return ans;
    }
};

//Seive of erathonese 
// without if statement TC is O(nlogn)
// with if statement TC is O(nlog(logn))

class Solution {
public:
    int countPrimes(int n) {
        vector<int>prime(n+1,true);
        int sqqrt=sqrt(n);
        
        for(long long int i=2;i<=sqqrt;i++){
            
            if(prime[i]==true){
            for(long long int j=2;i*j<=n;j++)
            {
                prime[j*i]=false;
            } 
            }
        }
        int count=0;
        
        for(int i=2;i<n;i++){
            
            if(prime[i]==true)
                count++;
            
        }
        return count;
    }
};

//Reverse an array by k position
//=> reverse (0 to that position) then reverse(that position to end ) then reverse the entire vector
class Solution {
public:
    void reverse(vector<int>&nums,int start,int end){
        while(start<end){
            swap(nums[start++],nums[end--]);
        }
    }
    void rotate(vector<int>& nums, int k) {
       
        k=(k+nums.size())%nums.size();
        reverse(nums,0,nums.size()-k-1);
        reverse(nums,nums.size()-k,nums.size()-1);
        reverse(nums,0,nums.size()-1);
    }
};


// Basic Calculator 2 
I stored the previous sign and decided what to do on my current number 

 int calculate(string s) {
        
        
        char sign='+';
        int val=0;
        stack<int>st;
        for(int i=0;i<s.size();i++){
            
            if(s[i]==' ')continue ;
            
            if(s[i]>='0' && s[i]<='9'){
                
                while(i<s.size() && (s[i]>='0' && s[i]<='9')){
                    val=val*10 + (s[i]-'0');
                    i++;
                }
                
                if(sign=='+' || sign=='-'){
                    st.push((sign=='+')?val : -val);
                }
                
                else if (sign=='*'){
                    int top_val=st.top();
                    st.pop();
                    st.push(top_val*val);
                }
                else {
                     int top_val=st.top();
                    st.pop();
                    st.push(top_val/val);
                }
                val=0;
                i--;
            }
            else sign=s[i];
        }
        int ans=0;
        while(!st.empty()){
            ans+=st.top();
            st.pop();
        }
        return ans;
}

If in a 2d matrix arrays are sorted in rowise and column wise 
1. last element of previous row < first element of current row => O(logn)
2. if not the above case then O(n+m)
        

// Given an integer n, return the least number of perfect square numbers that sum to n.

    int numSquares(int n) {
        
        
        
       
        vector<int>nums;
        int square_root=sqrt(n);
        if(square_root * square_root ==  n)return 1;
        
        for(int i=1;i<=square_root;i++){
            nums.push_back(i*i);
        }
        int m=nums.size();  //minimum number of coins to make the sum
        
        vector<vector<int>>dp(m+1,vector<int>(n+1,INT_MAX-1));
        dp[0][0]=0;
        for(int i=1;i<=m;i++){
           
            for(int j=0;j<=n;j++){
                
                dp[i][j]=dp[i-1][j];
                
            
                
                 if(j>=nums[i-1]){
                    dp[i][j]=min(dp[i][j],1+dp[i][j-nums[i-1]]);
            
                }
             
            }
        }
        return dp[m][n];        
}


// Wiggle Sort 2 a<b>c<d>e<f

 void wiggleSort(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int maxval=nums[n-1]+1;
        
        int start=(n-1)/2,end=n-1;
       
        for(int i=0;i<n;i++){
            
            if(i%2==0){
                nums[i]=(nums[start--]%maxval)*maxval+nums[i];
            }
            else {
                nums[i]=(nums[end--]%maxval)*maxval + nums[i];
            }
            
        }
        for(int i=0;i<n;i++){
            nums[i]=nums[i]/maxval;
        }
    }
       
// Odd-even join 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        ListNode* even=new ListNode(0);
        ListNode* odd=new ListNode(1);
        ListNode* temp_odd=odd,*temp_even=even,*temp=head;
        
        bool flag=false;
        
        
        while(temp){
            
            if(flag){
                temp_even->next=temp;
                temp_even=temp_even->next;
                
            }
            else {
                temp_odd->next=temp;
                temp_odd=temp_odd->next;
                
            }
            flag=!flag;
            temp=temp->next;  
        }
        temp_odd->next=NULL;
        temp_even->next=NULL;
        
        temp_odd->next=even->next;
        return odd->next;
    }
};

//Insert , Delete and getrandom element ..create a data structure
=> use map + vector

class RandomizedSet {
public:
    vector<int>v;
    unordered_map<int,int>mp;
    RandomizedSet() {
        v.clear();
        mp.clear();
    }
    
    bool insert(int val) {
        if(mp.find(val)!=mp.end())return false;

        v.push_back(val);
        mp[val]=v.size()-1;
        
        return true;
    }
    
    bool remove(int val) {
        if(mp.find(val)==mp.end())return false;
        
      int last = v.back();
        mp[last] = mp[val];
        v[mp[val]] = last;
        v.pop_back();
        mp.erase(val);
        
        
        return true;
    }
    
    int getRandom() {
        return v[rand() % (v.size())];
    }
};


//Shuffle an array 
=> Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations
of the array should be equally likely as a result of the shuffling.

class Solution {
public:
    vector<int>org;
    vector<int>v;
    Solution(vector<int>& nums) {
        org=nums;
    }
    
    vector<int> reset() {
        return org;
    }
    
    vector<int> shuffle() {
        vector<int>ans;
        v=org;
        while(v.size()!=0){
            int index= rand()%v.size();
            ans.push_back(v[index]);
            v.erase(v.begin()+index);
        }
        return ans;
    }
};

//Sum of two numbers without using "+" or "-"

class Solution {
public:
  int getSum(int a, int b) {   
    while(a){
        int sum = a ^ b;  //=> to find sum (1,1) (1,0) (0,1) (0,0) => this will result to when we take xor
        
        a = ((a & b) & 0x7fffffff) << 1;      // for remainder we have to take and operation as
                                             //remeinder will be only there for (1,1) so we take and shift it one step leftward  
        // make sure the first bit (sign bit) of carry (a & b) always be zero       
        b = sum;
    }
    return b;
}
};

//Partition Labels : You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.

class Solution {
public:
    vector<int> partitionLabels(string s) {
        vector<int>ans;
        int prev=-1,maxi=0;
        
        vector<int>dict(26,0);
        
        for(int i=0;i<s.size();i++){
            dict[s[i]-'a']=i;
        }
        
        for(int i=0;i<s.size();i++){
            maxi=max(maxi,dict[s[i]-'a']);
            
            if(maxi==i){
                ans.push_back(i-prev);
                prev=i;
            }
        }
        return ans;
    }
};


// Find All Anagrams in a String : Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
       vector<int>dict(26,0);
        vector<int>cur(26,0);
        vector<int>ans;
        
        for(int i=0;i<p.size();i++){
            dict[p[i]-'a']+=1;
        }
        if(s.size()<p.size())return ans;
        
        int left=0,right=0;
        
        while(right<s.size()){
            
            while(right-left!=p.size()){
                cur[s[right++]-'a']+=1;
            }
            if(cur==dict){
                ans.push_back(left);
            }
            cur[s[left]-'a']-=1;
            left++;
            
        }
        return ans;
    }
};

// decode string 
Input: s = "3[a2[c]]"
Output: "accaccacc"

class Solution {
public:
    string decodeString(string s) {
        string curstring="";
        int num=0;
        
        stack<string>stringstack;
        stack<int>intstack;
        
    
        for(int i=0;i<s.size();i++){
            
            if(s[i]>='0' && s[i]<='9'){
                num=num*10+ (s[i]-'0');
            }
            
            else if(s[i]=='['){
               stringstack.push(curstring);
                intstack.push(num);
                curstring="";
                num=0;
            }
            else if(s[i]>='a' && s[i]<='z'){
                curstring.push_back(s[i]);
            }
            else if(s[i]==']')
            {
              int freq=intstack.top();
                
                string res=curstring;
                
                for(int i=1;i<freq;i++)
                    curstring=curstring+res;
                
                curstring=stringstack.top()+curstring;
                stringstack.pop();
                intstack.pop();
                
            }
        }
        return curstring;
        
    }
};

//Maximum of minimum product 1856
First we find the prefix sum of given array.
Then we find the number of largest numbers to the left in "array left" and number of largest numbers to the right in "array right" with nums[i] as minimum.
After finding that, now its become simple, as we know the length of sub array with nums[i] as minimum.
To get starting index a, a = i-left[i]+1, and ending index b = i+right[i]-1.
Then process the res, as we know the sum of subarray as we have prefix sum and minimum element is nums[i].
Update the res by finding maximum of min-product.um products

Amazon Leetcode premium question - file:///C:/Users/Public/Downloads/Problems%20-%20LeetCode%20(07_07_2022%2016_12_28)%20(3).html




1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit

class Solution {
public:
    int longestSubarray(vector<int>& A, int limit) {
        deque<int> maxd, mind;
        int i = 0, j;
        for (j = 0; j < A.size(); ++j) {
            while (!maxd.empty() && A[j] > maxd.back()) maxd.pop_back();
            while (!mind.empty() && A[j] < mind.back()) mind.pop_back();
            maxd.push_back(A[j]);
            mind.push_back(A[j]);
            if (maxd.front() - mind.front() > limit) {
                if (maxd.front() == A[i]) maxd.pop_front();
                if (mind.front() == A[i]) mind.pop_front();
                ++i;
            }
        }
        return j - i;
    }
};


