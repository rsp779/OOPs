1. k reverse linklist 

 ListNode* Solution::reverseList(ListNode* A, int B) {
    
    if(B==1)
    return A;
    
    ListNode* dummy=new ListNode(-1);
    dummy->next=A;
    
    ListNode* cur=dummy,*nex=dummy,*pre=dummy;
    
    
    while(pre->next!=NULL)
    {
        cur=pre->next;
        nex=cur->next;
        for(int i=1;i<B;i++)
        {
            cur->next=nex->next;
            nex->next=pre->next;
            pre->next=nex;
            nex=cur->next;
        }
        pre=cur;
    }
    return dummy->next;
}

2. serialize deserialize tree
3. clone of a graph
4. Next pointer in the tree

      while(head){

      TreeNode* dummy=new TreeNode*(-1);
      dummy->next=(head->left)?head->left:head->right;
      TreeNode* temp=dummy;

      while(head)
      {

           if(head->left)
           {
            temp->next=head->left;
            temp=temp->next;
           }
           
           if(head->right)
           {
              temp->next=head->right;
              temp=temp->next;
           }
           head=head->next;
      }
      head=dummy->next;
      }

//Ways to decode 
int Solution::numDecodings(string A) {
    int mod=1e9+7;
     vector<int> dp(A.size()+1,0);
   
    dp[0]=1;
    dp[1]=1;
    if(A[0]=='0')
    return 0;
   
    for(int i=2;i<=A.size();i++)
    {
        if(A[i-1]>'0')
        dp[i]=dp[i-1];
        
        if(((A[i-2]=='1') || (A[i-2]=='2' && A[i-1]<'7')))
        dp[i]=(dp[i]%mod+dp[i-2]%mod)%mod;
    }
    return dp[A.size()];
}


