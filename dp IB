//wildcard pattern matching 
class Solution {
public:
    bool isMatch(string s, string p) {
        int n=s.length(),m=p.length();
        
        vector<vector<bool>>dp(m+1,vector<bool>(n+1,false));
        
        dp[0][0]=true;
        
        for(int i=1;i<=m;i++)
        {
            if(p[i-1]=='*')
                dp[i][0]=dp[i-1][0];
        }
        
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(p[i-1]=='*')
                    dp[i][j]=dp[i-1][j] || dp[i][j-1];
                
                else if(p[i-1]=='?')
                    dp[i][j]=dp[i-1][j-1];
                else if(p[i-1]==s[j-1])
                    dp[i][j]=dp[i-1][j-1];
                else dp[i][j]=false;
                
            }
        }
        return dp[m][n];
    }
};
//distinct subsequence 
int Solution::numDistinct(string A, string B) {
    
    int n=A.size();
    int m=B.size();
    
    vector<vector<int>>dp(m+1,vector<int>(n+1,0));
    
   for(int j=0;j<=n;j++)
   dp[0][j]=1;
   
    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(B[i-1]==A[j-1])
            {
                dp[i][j]=dp[i-1][j-1]+dp[i][j-1];
            }
            else dp[i][j]=dp[i][j-1];
        }
    }
    return dp[m][n];
}

//2nd pattern matching 
int Solution::isMatch(const string A, const string B) {
if(A==B)
return 1;
int n=A.size();
int m= B.size();

int i=n-1, j=m-1;

while(i>=0 && j>=0)
{
    if(A[i]!=B[j] && B[j]!='.')
    {
        if(B[j]=='*')
        {
            if(B[j-1] == A[i] || B[j-1] == '.')
            {
                i--;
                continue;
            }
            else
            {
                j=j-2;
                continue;
            }
        }
        return 0;
    }
    else
    {
        i--; j--;
    }
}
if(i>=0)
    return 0;
return 1;
}

//interleaving string
int Solution::isInterleave(string A, string B, string C) {
    
    int n=A.size();
    int m=B.size();
    vector<vector<bool>>dp(n+1,vector<bool>(m+1,false));
    dp[0][0]=true;
    
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            if(i>0 && A[i-1]==C[i+j-1])
            dp[i][j]=dp[i][j] || dp[i-1][j];
            
            if(j>0 && B[j-1]==C[i+j-1])
            dp[i][j]=dp[i][j]||dp[i][j-1];
        }
    }
    return dp[n][m];
}


