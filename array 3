#include <iostream>
using namespace std;

//triplet with sum in the given range 2 and 3

int Solution::solve(vector<string> &A) {
    
    int n=A.size();
    double a=stod(A[0]);
    double b=stod(A[1]);
    
    for(int i=2;i<n;i++)
    {
        double c=stod(A[i]);
        
        double sum=a+b+c;
        if(sum>1 && sum<2)
        return 1;
        
        if(sum>2)
        {
           if(a>=c && a>=b)
           {
               a=c;
           }
           else if(b>=c && b>=a)
           {
               b=c;
           }
           
        }
        else {
           if(a<=c && a<=b)
           a=c;
           else if(b<=c && b<=a)
           b=c;
           
        }
    }
    return 0;
}

// A element is special if removal of that element make the array balanced.

//Array will be balanced if sum of even index element equal to sum of odd index element.

int Solution::solve(vector<int> &A) {
   
    int odd=0,even=0;
    for(int i=0;i<A.size();i++)
    {
        if(i%2==0)
        even+=A[i];
        else odd+=A[i];
    }
    int count=0;
    
    for(int i=0;i<A.size();i++)
    {
        if(i%2==0)
        even-=A[i];
        else odd-=A[i];
        
        if(even==odd)
        count++;
        
        if(i%2==0)
        odd+=A[i];
        else even+=A[i];
    }
    return count;
}

//Given an unsorted array, find the maximum difference between the 
//successive elements in its sorted form.

int Solution::maximumGap(const vector<int> &A) {
    int n=A.size();
    if(n<2)
    return 0;
    int xmin=1e9,xmax=-1;
    for(int i=0;i<n;i++)
    {
        xmin=min(xmin,A[i]);
        xmax=max(xmax,A[i]);
    }
    int delta= ceil(double(xmax-xmin)/double(n-1));
    vector<int>bmin(n-1,INT_MAX);
    vector<int>bmax(n-1,INT_MIN);
    if(delta==0)
    return 0;
    for(int i=0;i<n;i++)
    {
        if(A[i]==xmax || A[i]==xmin)
        continue;
        int x=(A[i]-xmin)/delta;
        bmin[x]=min(bmin[x],A[i]);
        bmax[x]=max(bmax[x],A[i]);
    }
    int prev=xmin;
    int ans=0;
    for(int i=0;i<n-1;i++)
    {
        if(bmin[i]==INT_MAX)
        continue;
        
            ans=max(ans,bmin[i]-prev);
            prev=bmax[i];
    }
    ans=max(ans,xmax-prev);
    
    return ans;
}

//find out integer which occur more than n/3 times
int Solution::repeatedNumber(const vector<int> &A) {
    
    int a1=-1,a2=-1,c1=0,c2=0;
    int n=A.size();
    for(int i=0;i<n;i++)
    {
        if(A[i]==a1)
        {
            c1++;
        }
        else if(A[i]==a2)
        {
            c2++;
        }
        else if(c1==0)
        {
            c1++;
            a1=A[i];
        }
        else if(c2==0)
        {
            c2++;
            a2=A[i];
        }
        else {
            c1--;
            c2--;
        }
    }
    
    c1=0,c2=0;
    
    for(int i=0;i<n;i++)
    {
        if(A[i]==a1)c1++;
        if(A[i]==a2)c2++;
    }
    if(c1>n/3)return a1;
    if(c2>n/3)return a2;
    
    return -1;
}
//Each integer appears exactly once except A which appears twice and B which is missing.

vector<int> Solution::repeatedNumber(const vector<int> &A) {
    
    int x=0,y=0;
    int n =A.size();
    for(int i=0;i<A.size();i++)
    {
        x=x^A[i];
    }
    for(int i=1;i<=A.size();i++)
    x=x^i;
    int p=x;
    int last=-1;
   for(int i=0;i<32;i++)
   {
       if(p%2!=0)
       {
           last=i+1;
           break;
       }
       p=p/2;
   }
    
    int z=0;
    for(int i=0;i<n;i++)
    {
        if(A[i]&last)
        z=z^A[i];
        
        if((i+1)&last)
        z=z^(i+1);
    }
    
    vector<int>ans;
    ans.push_back(z);
    ans.push_back(x^z);
    return ans;
}
int main() {
	// your code goes here
	return 0;
}
