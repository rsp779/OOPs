#include <iostream>
using namespace std;

//Count and Say
string Solution::countAndSay(int A) {
    if(A==1)
    return "1";
    string res="1";
    A=A-1;
    
    while(A--)
    {
        string ans="";
        int i=0;
        res.push_back(' ');
        for(int j=0;j<res.size();j++)
        {
            if(res[j]!=res[i])
            {
                int len=j-i;
                ans.append(to_string(len));
                ans.push_back(res[i]);
                i=j;
            }
        }
        res=ans;
    }
    return res;
}

//length of the longest word 
string Solution::longestCommonPrefix(vector<string> &A) {
    string ans="";
    int l=0;
    int h=A[0].size();
    
    while(l<=h)
    {
        int mid=h+(l-h)/2;
        string x=A[0].substr(0,mid);
        
        int count=1;
        for(int i=1;i<A.size();i++)
        {
            if(x==(A[i].substr(0,mid)))
            count++;
        }
        if(count==A.size())
        {
            ans=x;
            l=mid+1;
        }
        else h=mid-1;
    }
    return ans;
}

//Full KMP 
int Solution::strStr(const string A, const string B) {
    
    int n=B.size();
    int m=A.size();
    
    vector<int>dp(n,0);
    int i=0,j=1;
    while(j<n)
    {
        if(B[i]==B[j])
        {
            dp[j]=i+1;
            i++;
            j++;
        }
        else {
            if(i==0)
            j++;
            else i=dp[i-1];
        }
    }
    i=0,j=0;
    while(i<m)
    {
        if(A[i]==B[j])
        {
            i++;
            j++;
        }
        else {
            if(j==0)
            i++;
            else j=dp[j-1];
        }
        if(j==n)
        return i-j;
        cout<<i<<" "<<j<<" "<<dp[j]<<endl;
    }
    return -1;
}


//Minimum charecters that must be added in the beginning 

//Here we are only interested in the last value of this lps array because it shows us the largest
//suffix of the reversed string that matches the prefix of the original string i.e these many characters 
//already satisfy the palindrome property.

int Solution::solve(string s) {
    
    string x=s;
    reverse(x.begin(),x.end());
    string p=s+'$'+x;
    
    int n=p.size();
    int i=0,j=1;
    int dp[n]={0};
    
    while(j<n)
    {
        if(p[i]==p[j])
        {
            dp[j]=i+1;
            i++;
            j++;
        }
        else {
            if(i==0)
            {
                dp[j]=0;
                j++;
            }
            else i=dp[i-1];
        }
    }
    return s.size()-dp[n-1];
    
}
//to OOP Solution
int Solution::solve(string s) {
    int n=s.size();
    int i=0,j=n-1;
    int ans=0;
    while(i<j)
    {
        if(s[i]==s[j])
        {
            i++;
            j--;
        }
        else {
            if(i==0)
            j--;
        
             i=0;
            
            ans=n-1-j;
         }
    }
    return ans;
}


//Given a string A consisting only of lowercase characters,
//we need to check whether it is possible to make 
//this string a palindrome after removing exactly one character from this.

bool ispos(string A)
{
    int l=0,r=A.size()-1;
    int count=0;
    
    
    while(l<r)
    {
        if(A[l]==A[r]){l++;r--;}
        else if(A[l]==A[r-1]){count+=1;r--;}
        else if(A[l+1]==A[r]){
            count+=1;
            l=l+1;
        }
        else return false;
    }
    
    if(count<=1 )
    return true ;
    
    return false;
}


// Add charecters to last to make it palindrome 
int Solution::solve(string A) {
    int i=0,j=A.size()-1;
    int ans=0;
    int n=A.size();
    while(i<j)
    {
        if(A[i]==A[j])
        {
            i++;
            j--;
        }
        else {
            if(j==n-1)
            i++;
            
            j=n-1;
            
            ans=i;
        }
    }
    return ans;
}

//The task is to find minimum number of parentheses ‘(‘ or ‘)’ (at any positions) we must add to make 
//the resulting parentheses string valid.
int Solution::solve(string A) {
    
   int a=0,b=0;
    
    for(int i=0;i<A.length();i++)
    {
        if(a==0 && A[i]==')')b++;
        else if(A[i]=='(')a++;
        else a--;
    }
    return a+b;
}


//longesr palidromic substring 
string Solution::longestPalindrome(string A) {
    
    int maxlen=1;
    string ans="";
    ans.push_back(A[0]);
    int n=A.length();
    for(int i=0;i<A.length();i++)
    {
        int lef=i-1;
        int rig=i+1;
        
        while((lef>=0) && (rig<n))
        {
            if(A[lef]!=A[rig])
            break;
            
            if(maxlen<(rig-lef+1))
            {
                maxlen=rig-lef+1;
                ans=A.substr(lef,rig-lef+1);
            }
            lef--;
            rig++;
        }
        lef=i;
        rig=i+1;
        while((lef>=0) && (rig<n))
        {
            if(A[lef]!=A[rig])
            break;
            
            if(maxlen<(rig-lef+1))
            {
                maxlen=rig-lef+1;
                ans=A.substr(lef,rig-lef+1);
            }
            lef--;
            rig++;
        }
        
        
    }
     return ans;
}

//lenght of last word 
int Solution::lengthOfLastWord(const string A) {
    int n=A.size()-1;
    while(A[n]==' ')
    n--;

    if(n==-1)
    return 0;

    int i=n;
    for(;i>=0;i--)
    {
        if(A[i]==' ')
        break;
    }
 //   cout<<n<<" "<<i<<endl;
    return n-i;
}
//integer to roman 
string Solution::intToRoman(int A) {
    map<int,string>mp;
    mp[1000]='M';
    mp[900]="CM";
    mp[500]='D';
    mp[400]="CD";
    mp[100]='C';
    mp[90]="XC";
    mp[50]='L';
    mp[40]="XL";
    mp[10]='X';
    mp[9]="IX";
    mp[5]='V';
    mp[4]="IV";
    mp[1]='I';
    string ans="";
    while(A>0)
    {
        auto itr=mp.end();
        --itr;
        for(;itr!=mp.begin();--itr)
        {
            if(A/(itr->first)>0)
            break;
        }
        
        int count=(A/itr->first);
        for(int i=0;i<count;i++)
        ans=ans+((itr->second));
        
        A=A%((itr->first)*count);
    }
    return ans;
}

//Roman to integer 
int Solution::romanToInt(string A) {
    unordered_map<char,int>mp;
    mp['I']=1;
    mp['V']=5;
    mp['X']=10;
    mp['L']=50;
    mp['C']=100;
    mp['D']=500;
    mp['M']=1000;
    int ans=0;
    for(int i=0;i<A.length()-1;i++)
    {
        int x=mp[A[i]];
        int y=mp[A[i+1]];
        
         if(y>x)
         ans=ans-x;
         else ans=ans+x;
    }
    ans=ans+mp[A[A.length()-1]];
    return ans;
}
//Add binary string 
string Solution::addBinary(string A, string B) {
    string ans="";
    int a=A.length(),b=B.length();
    int carry=0;
    int sum=0;
    while(a>=0 || b>=0 || carry)
    {
        sum=carry;
        if(a>=0)sum+=A[--a]-'0';
        if(b>=0)sum+=B[--b]-'0';
        ans.push_back((char)('0' + sum%2));
        carry=sum/2;
    }
    reverse(ans.begin(),ans.end());
    return ans;
}
//power of 2 
int Solution::power(string A) {
    
    if(A[0]=='-')
    return 0;
    
    
    if(A.length()==1)
        {
            if(A[0]=='2'||A[0]=='4' ||A[0]=='8' )
            return 1;
            else return 0;
        }
    
    while(true)
    {
        string str="";
        int rem=0;
        
       
        for(int i=0;i<A.length();i++)
        {
            int cur=rem*10+(A[i]-'0');
            str.push_back((char)(cur/2 + '0'));
            rem=cur%2;
        }
    
        int len=str.length()-1;
        
        reverse(str.begin(),str.end());
        
        while(str[len--]=='0')
        str.pop_back();
        
         reverse(str.begin(),str.end());
         len=str.length();
       //  cout<<str<<" "<<rem<<endl;
       
       
        if(len==1 )
        {
            if(str[0]=='2'||str[0]=='4' ||str[0]=='8' )
            return 1;
            else return 0;
        }

        A=str;
        
        if(rem==1 )
        return 0;
    }
    return 1;
    
    
}
// multiply two string 
string Solution::multiply(string A, string B) {
    
    int n=A.size();
    int m=B.size();
    
      string ans="";
      for(int i=0;i<n+m;i++)
      ans.push_back('0');
        
        for(int i=n-1;i>=0;i--)
        {
            for(int j=m-1;j>=0;j--)
            {
                int sum=(A[i]-'0')*(B[j]-'0')+(ans[i+j+1]-'0');
                ans[i+j+1]=(sum%10)+'0';
                ans[i+j]=((ans[i+j]-'0')+((sum/10)))+'0';
            }
        }
       for(int i=0;i<n+m;i++)
       {
           if(ans[i]!='0')
           return ans.substr(i);
       }
       return "0";
}


int main() {
	// your code goes here
	return 0;
}
